# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarQube analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# (This feature is available starting from SonarQube 9.7, Developer Edition and above)

# 1. Make sure you add a valid GitHub configuration to your SonarQube (Administration > DevOps platforms > GitHub)

# 2. Import your project on SonarQube
#     * Add your repository as a new project by clicking “Create project” from your homepage.
#
# 3. Select GitHub Actions as your CI and follow the tutorial
#     * a. Generate a new token and add it to your GitHub repository’s secrets using the name SONAR_TOKEN
#          (On SonarQube, click on your avatar on top-right > My account > Security, or ask your administrator)
#
#     * b. Copy/paste your SonarQube host URL to your GitHub repository’s secrets using the name SONAR_HOST_URL
#
#     * c. Copy/paste the project Key into the args parameter below
#          (You’ll find this information in SonarQube by following the tutorial or by clicking on Project Information at the top-right of your project's homepage)

# Feel free to take a look at our documentation (https://docs.sonarqube.org/latest/analysis/github-integration/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/sq/10)

name: SonarQube analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarQube to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags.
          # SonarQube performs branch/PR analysis based on the git history.
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your project's Node.js version

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8 # Or your project's pnpm version

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # Or any other distribution

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm build # Adjust if your build script is different (e.g., pnpm run build)

      - name: Analyze with SonarQube
        uses: SonarSource/sonarqube-scan-action@7295e71c9583053f5bf40e9d4068a0c974603ec8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args:
            -Dsonar.projectKey=praxis-eng_praxisphere-platform_fb9e50d8-b1bd-4b28-a98e-28c2e3ad44cf
            # If your TypeScript output directory is different from your source,
            # you might need to configure sonar.sources and sonar.javascript.lcov.reportPaths
            # For example:
            # -Dsonar.sources=src
            # -Dsonar.tests=src # if tests are in src, or specify test folder
            # -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info # if you generate coverage reports